{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1963ce4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import requests\n",
    "import msal\n",
    "import json\n",
    "\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "load_dotenv()  # take environment variables from .env."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "add76004-1d76-45e8-9bf7-daf913d8cc54",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb07b909-d6c8-4c8e-83b3-0c51b41a6408",
   "metadata": {},
   "outputs": [],
   "source": [
    "username = os.getenv(\"OUTLOOK_EMAIL\")\n",
    "password = os.getenv(\"OUTLOOK_PASSWD\")\n",
    "\n",
    "CLIENT_ID = os.getenv(\"CLIENT_ID\")\n",
    "CLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\n",
    "TENANT_ID = os.getenv(\"TENANT_ID\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "982025f3-8837-4301-9f27-92e67ae13662",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Authentication scopes\n",
    "SCOPES = [\"https://graph.microsoft.com/Mail.Read\"]\n",
    "\n",
    "# Create MSAL app\n",
    "app = msal.ConfidentialClientApplication(\n",
    "    CLIENT_ID,\n",
    "    authority=f\"https://login.microsoftonline.com/{TENANT_ID}\",\n",
    "    client_credential=CLIENT_SECRET\n",
    ")\n",
    "\n",
    "# Acquire token\n",
    "result = app.acquire_token_for_client(scopes=SCOPES)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "728147cc-756d-4dff-90e4-dc48bc1c6784",
   "metadata": {},
   "source": [
    "def get_outlook_emails():\n",
    "    # App registration details (you'll need to register an app in Azure portal)\n",
    "    CLIENT_ID = os.getenv(\"CLIENT_ID\")\n",
    "    CLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\n",
    "    TENANT_ID = os.getenv(\"TENANT_ID\")\n",
    "    \n",
    "    # Authentication scopes\n",
    "    SCOPES = [\"https://graph.microsoft.com/Mail.Read\"]\n",
    "    \n",
    "    # Create MSAL app\n",
    "    app = msal.ConfidentialClientApplication(\n",
    "        CLIENT_ID,\n",
    "        authority=f\"https://login.microsoftonline.com/{TENANT_ID}\",\n",
    "        client_credential=CLIENT_SECRET\n",
    "    )\n",
    "    \n",
    "    # Acquire token\n",
    "    result = app.acquire_token_for_client(scopes=SCOPES)\n",
    "    \n",
    "    if \"access_token\" in result:\n",
    "        # Use token to call Microsoft Graph\n",
    "        headers = {\n",
    "            'Authorization': f'Bearer {result[\"access_token\"]}',\n",
    "            'Content-Type': 'application/json'\n",
    "        }\n",
    "        \n",
    "        # Get messages from inbox\n",
    "        response = requests.get(\n",
    "            'https://graph.microsoft.com/v1.0/me/messages',\n",
    "            headers=headers\n",
    "        )\n",
    "        \n",
    "        if response.status_code == 200:\n",
    "            emails = response.json()\n",
    "            return emails\n",
    "        else:\n",
    "            print(f\"Error: {response.status_code}\")\n",
    "            print(response.text)\n",
    "    else:\n",
    "        print(result.get(\"error\"))\n",
    "        print(result.get(\"error_description\"))\n",
    "        print(result.get(\"correlation_id\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "96aac4a2-1ec9-4f5a-8fae-e6163fcf3419",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_outlook_emails():\n",
    "    # App registration details\n",
    "    CLIENT_ID = os.getenv(\"CLIENT_ID\")\n",
    "    CLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\n",
    "    TENANT_ID = os.getenv(\"TENANT_ID\")\n",
    "    \n",
    "    # For client credential flow, use .default scope\n",
    "    SCOPES = [\"https://graph.microsoft.com/.default\"]\n",
    "    \n",
    "    # Create MSAL app\n",
    "    app = msal.ConfidentialClientApplication(\n",
    "        CLIENT_ID,\n",
    "        authority=f\"https://login.microsoftonline.com/{TENANT_ID}\",\n",
    "        client_credential=CLIENT_SECRET\n",
    "    )\n",
    "    \n",
    "    # Acquire token\n",
    "    result = app.acquire_token_for_client(scopes=SCOPES)\n",
    "    \n",
    "    if \"access_token\" in result:\n",
    "        # Use token to call Microsoft Graph\n",
    "        headers = {\n",
    "            'Authorization': f'Bearer {result[\"access_token\"]}',\n",
    "            'Content-Type': 'application/json'\n",
    "        }\n",
    "        \n",
    "        # Note: client credentials flow cannot use /me - must use specific user ID\n",
    "        # You need to know the user ID or userPrincipalName\n",
    "        user_id = os.getenv(\"OUTLOOK_EMAIL\")  # Replace with actual email address\n",
    "        \n",
    "        response = requests.get(\n",
    "            f'https://graph.microsoft.com/v1.0/users/{user_id}/messages',\n",
    "            headers=headers\n",
    "        )\n",
    "        \n",
    "        if response.status_code == 200:\n",
    "            emails = response.json()\n",
    "            return emails\n",
    "        else:\n",
    "            print(f\"Error: {response.status_code}\")\n",
    "            print(response.text)\n",
    "    else:\n",
    "        print(result.get(\"error\"))\n",
    "        print(result.get(\"error_description\"))\n",
    "        print(result.get(\"correlation_id\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "49db56a7-3195-4291-92af-6a50fd556a1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: 401\n",
      "\n"
     ]
    }
   ],
   "source": [
    "emails = get_outlook_emails()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b16d52d-0ac6-4a53-aead-38028565e385",
   "metadata": {},
   "outputs": [
    {
     "ename": "UnauthorizedError",
     "evalue": "Invalid credentials for https://outlook.com/autodiscover/autodiscover.svc",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mUnauthorizedError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Usage\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m emails \u001b[38;5;241m=\u001b[39m \u001b[43mget_outlook_emails_with_ews\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m email \u001b[38;5;129;01min\u001b[39;00m emails:\n\u001b[0;32m      4\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSubject: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00memail\u001b[38;5;241m.\u001b[39msubject\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "Cell \u001b[1;32mIn[4], line 8\u001b[0m, in \u001b[0;36mget_outlook_emails_with_ews\u001b[1;34m()\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;66;03m# Connect to Exchange\u001b[39;00m\n\u001b[0;32m      7\u001b[0m credentials \u001b[38;5;241m=\u001b[39m Credentials(username, password)\n\u001b[1;32m----> 8\u001b[0m account \u001b[38;5;241m=\u001b[39m \u001b[43mAccount\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m      9\u001b[0m \u001b[43m    \u001b[49m\u001b[43mprimary_smtp_address\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43musername\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m     10\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcredentials\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcredentials\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m     11\u001b[0m \u001b[43m    \u001b[49m\u001b[43mautodiscover\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m     12\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccess_type\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mDELEGATE\u001b[49m\n\u001b[0;32m     13\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     15\u001b[0m \u001b[38;5;66;03m# Access inbox\u001b[39;00m\n\u001b[0;32m     16\u001b[0m inbox \u001b[38;5;241m=\u001b[39m account\u001b[38;5;241m.\u001b[39minbox\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\account.py:181\u001b[0m, in \u001b[0;36mAccount.__init__\u001b[1;34m(self, primary_smtp_address, fullname, access_type, autodiscover, credentials, config, locale, default_timezone)\u001b[0m\n\u001b[0;32m    177\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    178\u001b[0m     auth_type, retry_policy, version, max_connections \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    179\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mad_response, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprotocol \u001b[38;5;241m=\u001b[39m \u001b[43mAutodiscovery\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    180\u001b[0m \u001b[43m    \u001b[49m\u001b[43memail\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mprimary_smtp_address\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcredentials\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcredentials\u001b[49m\n\u001b[1;32m--> 181\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdiscover\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    182\u001b[0m \u001b[38;5;66;03m# Let's not use the auth_package hint from the AD response. It could be incorrect and we can just guess.\u001b[39;00m\n\u001b[0;32m    183\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprotocol\u001b[38;5;241m.\u001b[39mconfig\u001b[38;5;241m.\u001b[39mauth_type \u001b[38;5;241m=\u001b[39m auth_type\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\autodiscover\\discovery.py:124\u001b[0m, in \u001b[0;36mAutodiscovery.discover\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    121\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    122\u001b[0m         \u001b[38;5;66;03m# This will cache the result\u001b[39;00m\n\u001b[0;32m    123\u001b[0m         log\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCache miss for key \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, cache_key)\n\u001b[1;32m--> 124\u001b[0m         ad \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_step_1\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhostname\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdomain\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    126\u001b[0m log\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mReleased autodiscover_cache_lock\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    127\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ad\u001b[38;5;241m.\u001b[39mredirect_address:\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\autodiscover\\discovery.py:333\u001b[0m, in \u001b[0;36mAutodiscovery._step_1\u001b[1;34m(self, hostname)\u001b[0m\n\u001b[0;32m    331\u001b[0m url \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhttps://\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhostname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m/\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mURL_PATH\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    332\u001b[0m log\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mStep 1: Trying autodiscover on \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m with email \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, url, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39memail)\n\u001b[1;32m--> 333\u001b[0m is_valid_response, ad \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_attempt_response\u001b[49m\u001b[43m(\u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    334\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_valid_response:\n\u001b[0;32m    335\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_step_5(ad\u001b[38;5;241m=\u001b[39mad)\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\autodiscover\\discovery.py:257\u001b[0m, in \u001b[0;36mAutodiscovery._attempt_response\u001b[1;34m(self, url)\u001b[0m\n\u001b[0;32m    249\u001b[0m protocol \u001b[38;5;241m=\u001b[39m AutodiscoverProtocol(\n\u001b[0;32m    250\u001b[0m     config\u001b[38;5;241m=\u001b[39mConfiguration(\n\u001b[0;32m    251\u001b[0m         service_endpoint\u001b[38;5;241m=\u001b[39murl,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    254\u001b[0m     )\n\u001b[0;32m    255\u001b[0m )\n\u001b[0;32m    256\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 257\u001b[0m     user_response \u001b[38;5;241m=\u001b[39m \u001b[43mprotocol\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_user_settings\u001b[49m\u001b[43m(\u001b[49m\u001b[43muser\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43memail\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    258\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m RedirectError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    259\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_redirect_url_is_valid(url\u001b[38;5;241m=\u001b[39me\u001b[38;5;241m.\u001b[39murl):\n\u001b[0;32m    260\u001b[0m         \u001b[38;5;66;03m# The protocol does not specify this explicitly, but by looking at how testconnectivity.microsoft.com\u001b[39;00m\n\u001b[0;32m    261\u001b[0m         \u001b[38;5;66;03m# works, it seems that we should follow this URL now and try to get a valid response.\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\autodiscover\\protocol.py:47\u001b[0m, in \u001b[0;36mAutodiscoverProtocol.get_user_settings\u001b[1;34m(self, user, settings)\u001b[0m\n\u001b[0;32m     43\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m setting \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m UserResponse\u001b[38;5;241m.\u001b[39mSETTINGS_MAP:\n\u001b[0;32m     44\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m     45\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSetting \u001b[39m\u001b[38;5;132;01m{\u001b[39;00msetting\u001b[38;5;132;01m!r}\u001b[39;00m\u001b[38;5;124m is invalid. Valid options are: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28msorted\u001b[39m(UserResponse\u001b[38;5;241m.\u001b[39mSETTINGS_MAP\u001b[38;5;241m.\u001b[39mkeys())\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m     46\u001b[0m         )\n\u001b[1;32m---> 47\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mGetUserSettings\u001b[49m\u001b[43m(\u001b[49m\u001b[43mprotocol\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[43musers\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[43muser\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msettings\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msettings\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\services\\common.py:155\u001b[0m, in \u001b[0;36mEWSService.get\u001b[1;34m(self, expect_result, **kwargs)\u001b[0m\n\u001b[0;32m    147\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget\u001b[39m(\u001b[38;5;28mself\u001b[39m, expect_result\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m    148\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Like .call(), but expects exactly one result from the server, or zero when expect_result=False, or either\u001b[39;00m\n\u001b[0;32m    149\u001b[0m \u001b[38;5;124;03m    zero or one when expect_result=None. Returns either one object or None.\u001b[39;00m\n\u001b[0;32m    150\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    153\u001b[0m \u001b[38;5;124;03m    :return: Same as .call(), but returns either None or exactly one item\u001b[39;00m\n\u001b[0;32m    154\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 155\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    156\u001b[0m     \u001b[38;5;66;03m# Raise any errors\u001b[39;00m\n\u001b[0;32m    157\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m r \u001b[38;5;129;01min\u001b[39;00m res:\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\services\\common.py:216\u001b[0m, in \u001b[0;36mEWSService._elems_to_objs\u001b[1;34m(self, elems)\u001b[0m\n\u001b[0;32m    214\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_elems_to_objs\u001b[39m(\u001b[38;5;28mself\u001b[39m, elems):\n\u001b[0;32m    215\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Takes a generator of XML elements and exceptions. Returns the equivalent Python objects (or exceptions).\"\"\"\u001b[39;00m\n\u001b[1;32m--> 216\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43melem\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43melems\u001b[49m\u001b[43m:\u001b[49m\n\u001b[0;32m    217\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# Allow None here. Some services don't return an ID if the target folder is outside the mailbox.\u001b[39;49;00m\n\u001b[0;32m    218\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43misinstance\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43melem\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;167;43;01mException\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mtype\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[0;32m    219\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;28;43;01myield\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43melem\u001b[49m\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\services\\common.py:300\u001b[0m, in \u001b[0;36mEWSService._get_elements\u001b[1;34m(self, payload)\u001b[0m\n\u001b[0;32m    296\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[0;32m    297\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    298\u001b[0m         \u001b[38;5;66;03m# Create a generator over the response elements so exceptions in response elements are also raised\u001b[39;00m\n\u001b[0;32m    299\u001b[0m         \u001b[38;5;66;03m# here and can be handled.\u001b[39;00m\n\u001b[1;32m--> 300\u001b[0m         \u001b[38;5;28;01myield from\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_response_generator\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpayload\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpayload\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    301\u001b[0m         \u001b[38;5;66;03m# TODO: Restore session pool size on succeeding request?\u001b[39;00m\n\u001b[0;32m    302\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\services\\common.py:263\u001b[0m, in \u001b[0;36mEWSService._response_generator\u001b[1;34m(self, payload)\u001b[0m\n\u001b[0;32m    257\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_response_generator\u001b[39m(\u001b[38;5;28mself\u001b[39m, payload):\n\u001b[0;32m    258\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Send the payload to the server, and return the response.\u001b[39;00m\n\u001b[0;32m    259\u001b[0m \n\u001b[0;32m    260\u001b[0m \u001b[38;5;124;03m    :param payload: payload as an XML object\u001b[39;00m\n\u001b[0;32m    261\u001b[0m \u001b[38;5;124;03m    :return: the response, as XML objects\u001b[39;00m\n\u001b[0;32m    262\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 263\u001b[0m     response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_response_xml\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpayload\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpayload\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    264\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_elements_in_response(response\u001b[38;5;241m=\u001b[39mresponse)\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\services\\common.py:396\u001b[0m, in \u001b[0;36mEWSService._get_response_xml\u001b[1;34m(self, payload)\u001b[0m\n\u001b[0;32m    394\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m api_version \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_api_versions_to_try():\n\u001b[0;32m    395\u001b[0m     log\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTrying API version \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, api_version)\n\u001b[1;32m--> 396\u001b[0m     r \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_response\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpayload\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpayload\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mapi_version\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mapi_version\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    397\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstreaming:\n\u001b[0;32m    398\u001b[0m         \u001b[38;5;66;03m# Let 'requests' decode raw data automatically\u001b[39;00m\n\u001b[0;32m    399\u001b[0m         r\u001b[38;5;241m.\u001b[39mraw\u001b[38;5;241m.\u001b[39mdecode_content \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\services\\common.py:347\u001b[0m, in \u001b[0;36mEWSService._get_response\u001b[1;34m(self, payload, api_version)\u001b[0m\n\u001b[0;32m    345\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstop_streaming()\n\u001b[0;32m    346\u001b[0m session \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprotocol\u001b[38;5;241m.\u001b[39mget_session()\n\u001b[1;32m--> 347\u001b[0m r, session \u001b[38;5;241m=\u001b[39m \u001b[43mpost_ratelimited\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    348\u001b[0m \u001b[43m    \u001b[49m\u001b[43mprotocol\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprotocol\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    349\u001b[0m \u001b[43m    \u001b[49m\u001b[43msession\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msession\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    350\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprotocol\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mservice_endpoint\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    351\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_extra_headers\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    352\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwrap\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    353\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcontent\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpayload\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    354\u001b[0m \u001b[43m        \u001b[49m\u001b[43mapi_version\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mapi_version\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    355\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    356\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstreaming\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    357\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprotocol\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTIMEOUT\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    358\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    359\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle_response_cookies(session)\n\u001b[0;32m    360\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstreaming:\n\u001b[0;32m    361\u001b[0m     \u001b[38;5;66;03m# We con only release the session when we have fully consumed the response. Save session and response\u001b[39;00m\n\u001b[0;32m    362\u001b[0m     \u001b[38;5;66;03m# objects for later.\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\util.py:866\u001b[0m, in \u001b[0;36mpost_ratelimited\u001b[1;34m(protocol, session, url, headers, data, stream, timeout)\u001b[0m\n\u001b[0;32m    863\u001b[0m xml_log\u001b[38;5;241m.\u001b[39mdebug(xml_log_msg, xml_log_vals)\n\u001b[0;32m    865\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 866\u001b[0m     \u001b[43mprotocol\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mretry_policy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraise_response_errors\u001b[49m\u001b[43m(\u001b[49m\u001b[43mr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    867\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[0;32m    868\u001b[0m     r\u001b[38;5;241m.\u001b[39mclose()  \u001b[38;5;66;03m# Release memory\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\zinet\\Lib\\site-packages\\exchangelib\\protocol.py:727\u001b[0m, in \u001b[0;36mRetryPolicy.raise_response_errors\u001b[1;34m(self, response)\u001b[0m\n\u001b[0;32m    724\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m UnauthorizedError(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe referenced account is currently locked out\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    725\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response\u001b[38;5;241m.\u001b[39mstatus_code \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m401\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfail_fast:\n\u001b[0;32m    726\u001b[0m     \u001b[38;5;66;03m# This is a login failure\u001b[39;00m\n\u001b[1;32m--> 727\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m UnauthorizedError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid credentials for \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mresponse\u001b[38;5;241m.\u001b[39murl\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    728\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response\u001b[38;5;241m.\u001b[39mstatus_code \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m401\u001b[39m:\n\u001b[0;32m    729\u001b[0m     \u001b[38;5;66;03m# EWS sometimes throws 401's when it wants us to throttle connections. OK to retry.\u001b[39;00m\n\u001b[0;32m    730\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m ErrorServerBusy(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCaused by HTTP 401 response\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mUnauthorizedError\u001b[0m: Invalid credentials for https://outlook.com/autodiscover/autodiscover.svc"
     ]
    }
   ],
   "source": [
    "n = 0\n",
    "for email in emails.get('value', []):\n",
    "    n += 1\n",
    "    if n > 2: break\n",
    "    print(f\"Subject: {email['subject']}\")\n",
    "    print(f\"From: {email['from']['emailAddress']['address']}\")\n",
    "    print(f\"Received: {email['receivedDateTime']}\")\n",
    "    print(\"-\" * 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e35f2b64-9a98-4e2f-a896-fc6307b4a514",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  },
  "nbTranslate": {
   "displayLangs": [
    "*"
   ],
   "hotkey": "alt-t",
   "langInMainMenu": true,
   "sourceLang": "en",
   "targetLang": "fr",
   "useGoogleTranslate": true
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
