id,question,content,training_data_type
092be065-5a42-591f-9079-33f77a74fc31-sql,Find the top 5 most expensive tracks (based on unit price):,SELECT * FROM tracks ORDER BY UnitPrice DESC LIMIT 5;,sql
0ccd7b66-5344-502c-878f-3b4f3417e3d1-sql,Get the total number of invoices for each customer,"SELECT CustomerId, COUNT(*) as invoice_count FROM invoices GROUP BY CustomerId LIMIT 10;",sql
13f16b6e-9a5b-57b8-be42-67cd403dc00c-sql,Identify artists who have albums with tracks appearing in multiple genres:,"SELECT a.Name, COUNT(DISTINCT g.GenreId) as num_genres FROM artists AS a JOIN albums AS al ON a.ArtistId = al.ArtistId JOIN tracks AS t ON al.AlbumId = t.AlbumId JOIN genres AS g ON t.GenreId = g.GenreId GROUP BY a.ArtistId HAVING COUNT(DISTINCT g.GenreId) > 1 LIMIT 20;",sql
204f9289-25a1-586a-82f6-993019b88040-sql,"
                    Generating SQL for this question:  
        Can you find the top 10 most popular artists based on the number of tracks?
        Hint: There are 3 tables - artists, albums and tracks, 
        where albums and artists are linked by ArtistId, albums and tracks are linked by AlbumId,
    
                    results in the following error: [ERROR-VIZ] Failed to visualize df with plotly:
 str(e) .
                    Can you try to fix the error and re-generate the SQL statement?
                ","SELECT a.Name, COUNT(*) as num_tracks FROM artists AS a JOIN albums AS al ON a.ArtistId = al.ArtistId JOIN tracks AS t ON al.AlbumId = t.AlbumId GROUP BY a.Name ORDER BY num_tracks DESC LIMIT 10;",sql
2388a935-5876-57e6-972c-bb456b73a5df-sql,Get all playlists containing at least 10 tracks and the total duration of those tracks:,"SELECT p.Name, SUM(t.Milliseconds) as playlist_duration FROM playlists AS p JOIN playlist_track AS pt ON p.PlaylistId = pt.PlaylistId JOIN tracks AS t ON pt.TrackId = t.TrackId GROUP BY p.PlaylistId HAVING COUNT(*) >= 10 LIMIT 20",sql
39205e23-c047-5170-a664-cf9fbd0ef4c2-sql,"Find all tracks with a name containing ""What"" (case-insensitive) ",SELECT * FROM tracks WHERE Name LIKE '%What%' LIMIT 20,sql
490195ed-83fc-5e79-a109-fe0d74edb9ae-sql,what are the top 5 countries that customers come from?,"SELECT BillingCountry, COUNT(*) as count FROM invoices GROUP BY BillingCountry ORDER BY count DESC LIMIT 5;",sql
4dcd19bd-8d7d-5381-bf3c-c4b93e7bbaf0-sql,List all genres and the number of tracks in each genre:,"SELECT g.Name, COUNT(*) as num_tracks FROM genres AS g JOIN tracks AS t ON g.GenreId = t.GenreId GROUP BY g.Name LIMIT 20;",sql
52b655f7-e6ef-553c-924e-c3560328690d-sql,Find the total number of invoices per country,"SELECT BillingCountry, COUNT(*) as invoice_count FROM invoices GROUP BY BillingCountry LIMIT 20",sql
59326e87-0454-50a5-b797-ef9dea08cec2-sql, Get the average invoice total for each customer:,"SELECT CustomerId, AVG(Total) as avg_total FROM invoices GROUP BY CustomerId LIMIT 20;",sql
5e526ae4-4473-5cc5-9185-b16c465687c0-sql,How many customers are there,SELECT COUNT(*) FROM customers LIMIT 20,sql
5e93e4a6-441e-52a9-bf40-8b032beaa12a-sql," 
        Can you find the top 10 most popular artists based on the number of tracks?
        Hint: There are 3 tables - artists, albums and tracks, 
        where albums and artists are linked by ArtistId, albums and tracks are linked by AlbumId,
    ","SELECT a.Name, COUNT(*) as num_tracks FROM artists AS a JOIN albums AS al ON a.ArtistId = al.ArtistId JOIN tracks AS t ON al.AlbumId = t.AlbumId GROUP BY a.Name ORDER BY num_tracks DESC LIMIT 10;",sql
6802e58a-1b39-5345-9934-01987fdf463e-sql,List all albums and their corresponding artist names  ,"SELECT a.Title, ar.Name FROM albums AS a JOIN artists AS ar ON a.ArtistId = ar.ArtistId LIMIT 20",sql
808edaf8-d89a-5dc8-9b58-f69707007e80-sql,"      
        Find the top 5 customers who bought the most albums in total quantity (across all invoices):
        Hint: album quantity is found in invoice_items, 
    ","SELECT c.FirstName, c.LastName, COUNT(*) as album_count FROM customers AS c JOIN invoices AS i ON c.CustomerId = i.CustomerId JOIN invoice_items AS ii ON i.InvoiceId = ii.InvoiceId GROUP BY c.CustomerId ORDER BY album_count DESC LIMIT 5;",sql
899e644c-705b-5911-af3a-2d089a1f3d0e-sql,Find all invoices since 2010 and the total amount invoiced:,"SELECT InvoiceId, Total FROM invoices WHERE strftime('%Y',InvoiceDate) > '2010' LIMIT 20",sql
9f52b00e-4ebd-5eda-b218-51645a2fbdc1-sql,Can you list all tables in the SQLite database catalog?,SELECT name FROM sqlite_master WHERE type='table' LIMIT 20,sql
acc510eb-d3c2-5759-9778-a937c14b7413-sql,List all invoices with a total exceeding $10,SELECT * FROM invoices WHERE Total > 10 LIMIT 20;,sql
ad98bd20-3aa3-52a6-a507-a14e804776fe-sql,"
                    Generating SQL for this question: 
                    Generating SQL for this question: 
                    Generating SQL for this question: which table stores customer's orders
                    results in the following error: [ERROR-SQL] the generated SQL : The 'orders' table stores customer's orders.
 does not starts with ('select','with') .
                    Can you try to fix the error and re-generate the SQL statement?
                
                    results in the following error: [ERROR-SQL] the generated SQL : The 'orders' table stores customer's orders.
 does not starts with ('select','with') .
                    Can you try to fix the error and re-generate the SQL statement?
                
                    results in the following error: [ERROR-SQL] the generated SQL : The 'orders' table stores customer's orders.
 does not starts with ('select','with') .
                    Can you try to fix the error and re-generate the SQL statement?
                ",SELECT name FROM sqlite_master WHERE type='table' LIMIT 20;,sql
aecb6704-edda-523e-8be1-3ac3bb568e9c-sql,Find the customer with the most invoices ,"SELECT c.CustomerId, COUNT(*) as invoice_count FROM customers AS c JOIN invoices AS i ON c.CustomerId = i.CustomerId GROUP BY c.CustomerId ORDER BY invoice_count DESC LIMIT 20;",sql
b61b200e-4480-51d9-b271-586f22f9f4ad-sql,Find the customer who bought the most albums in total quantity (across all invoices):,"SELECT c.FirstName, c.LastName, SUM(ii.Quantity) as total_quantity FROM customers AS c JOIN invoices AS i ON c.CustomerId = i.CustomerId JOIN invoice_items AS ii ON i.InvoiceId = ii.InvoiceId GROUP BY c.CustomerId ORDER BY total_quantity DESC LIMIT 1;",sql
bafec59e-76ed-53c0-9013-b712e28e45f8-sql,"  
         Find the top 5 customers who spent the most money overall,  
         Hint: order total can be found on invoices table, calculation using invoice_items detail table is unnecessary 
    ","SELECT CustomerId, SUM(Total) as total_spent FROM invoices GROUP BY CustomerId ORDER BY total_spent DESC LIMIT 5;",sql
d082d7d7-7f7d-5e6c-b9e7-ce9a5f3d1ed9-sql,List all customers from Canada and their email addresses:,"SELECT Email, City FROM customers WHERE Country = 'Canada' LIMIT 20;",sql
fa5884c6-4c65-548e-8786-934f1ac1ec96-sql,List all employees and their reporting manager's name (if any):,"SELECT e1.FirstName, e2.FirstName AS ManagerFirstName FROM employees AS e1 JOIN employees AS e2 ON e1.ReportsTo = e2.EmployeeId LIMIT 20",sql
039f9d54-59f7-5f29-8c04-14dbc3e95671-ddl,,"CREATE TABLE ""artists""
(
    ArtistId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name NVARCHAR(120)
)",ddl
0db84e3d-ef41-563c-803e-21c1b985dc19-ddl,,"CREATE TABLE ""invoices""
(
    InvoiceId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    CustomerId INTEGER  NOT NULL,
    InvoiceDate DATETIME  NOT NULL,
    BillingAddress NVARCHAR(70),
    BillingCity NVARCHAR(40),
    BillingState NVARCHAR(40),
    BillingCountry NVARCHAR(40),
    BillingPostalCode NVARCHAR(10),
    Total NUMERIC(10,2)  NOT NULL,
    FOREIGN KEY (CustomerId) REFERENCES ""customers"" (CustomerId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)",ddl
10cba811-ddba-5042-9e90-d764dfcd1629-ddl,,"CREATE INDEX IFK_InvoiceCustomerId ON ""invoices"" (CustomerId)",ddl
2c711317-b93d-5f60-a728-cb1c6fcbc040-ddl,,"CREATE INDEX IFK_CustomerSupportRepId ON ""customers"" (SupportRepId)",ddl
37319c81-65f7-50ee-956b-795de244bee5-ddl,,"CREATE TABLE sqlite_stat1(tbl,idx,stat)",ddl
40bd77cd-e1de-5872-8693-624117ff413c-ddl,,"CREATE INDEX IFK_InvoiceLineInvoiceId ON ""invoice_items"" (InvoiceId)",ddl
41130543-7164-562a-90a7-0fd0a409c154-ddl,,"CREATE TABLE ""albums""
(
    AlbumId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Title NVARCHAR(160)  NOT NULL,
    ArtistId INTEGER  NOT NULL,
    FOREIGN KEY (ArtistId) REFERENCES ""artists"" (ArtistId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)",ddl
458debc8-8082-5450-a17a-66028bd55ace-ddl,,"CREATE TABLE ""playlists""
(
    PlaylistId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name NVARCHAR(120)
)",ddl
4815f3fd-925b-53ce-9dfa-0e4285d5abd3-ddl,,"CREATE TABLE ""invoice_items""
(
    InvoiceLineId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    InvoiceId INTEGER  NOT NULL,
    TrackId INTEGER  NOT NULL,
    UnitPrice NUMERIC(10,2)  NOT NULL,
    Quantity INTEGER  NOT NULL,
    FOREIGN KEY (InvoiceId) REFERENCES ""invoices"" (InvoiceId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (TrackId) REFERENCES ""tracks"" (TrackId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)",ddl
48d484e9-984c-58ff-b391-75521c69d486-ddl,,"CREATE INDEX IFK_PlaylistTrackTrackId ON ""playlist_track"" (TrackId)",ddl
551e1120-a6ee-554f-8b8a-ccf4f22d3636-ddl,,"CREATE INDEX IFK_AlbumArtistId ON ""albums"" (ArtistId)",ddl
5ff4911e-45c1-5a59-9566-243a9b6a3320-ddl,,"CREATE TABLE ""employees""
(
    EmployeeId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    LastName NVARCHAR(20)  NOT NULL,
    FirstName NVARCHAR(20)  NOT NULL,
    Title NVARCHAR(30),
    ReportsTo INTEGER,
    BirthDate DATETIME,
    HireDate DATETIME,
    Address NVARCHAR(70),
    City NVARCHAR(40),
    State NVARCHAR(40),
    Country NVARCHAR(40),
    PostalCode NVARCHAR(10),
    Phone NVARCHAR(24),
    Fax NVARCHAR(24),
    Email NVARCHAR(60),
    FOREIGN KEY (ReportsTo) REFERENCES ""employees"" (EmployeeId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)",ddl
65df0648-bf05-5f75-9365-c21f54b2302d-ddl,,"CREATE TABLE ""media_types""
(
    MediaTypeId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name NVARCHAR(120)
)",ddl
6b585176-e66d-5b23-8d86-ca8a80e3af3d-ddl,,"CREATE INDEX IFK_EmployeeReportsTo ON ""employees"" (ReportsTo)",ddl
868758b8-e018-55e7-8cc3-75c0e6d211c8-ddl,,"CREATE INDEX IFK_TrackAlbumId ON ""tracks"" (AlbumId)",ddl
9ea4613d-c1be-5a77-ada9-c54ee3f0cab7-ddl,,"CREATE INDEX IFK_TrackMediaTypeId ON ""tracks"" (MediaTypeId)",ddl
a9c9a852-608d-5ef2-aede-26ba098d83d1-ddl,,"CREATE INDEX IFK_TrackGenreId ON ""tracks"" (GenreId)",ddl
b42cc9e1-9219-5a42-9a06-de906f76239e-ddl,,"CREATE TABLE ""tracks""
(
    TrackId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name NVARCHAR(200)  NOT NULL,
    AlbumId INTEGER,
    MediaTypeId INTEGER  NOT NULL,
    GenreId INTEGER,
    Composer NVARCHAR(220),
    Milliseconds INTEGER  NOT NULL,
    Bytes INTEGER,
    UnitPrice NUMERIC(10,2)  NOT NULL,
    FOREIGN KEY (AlbumId) REFERENCES ""albums"" (AlbumId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (GenreId) REFERENCES ""genres"" (GenreId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (MediaTypeId) REFERENCES ""media_types"" (MediaTypeId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)",ddl
c387b9d2-5ff4-5a07-8364-f5dab45bb2a9-ddl,,"CREATE TABLE ""genres""
(
    GenreId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name NVARCHAR(120)
)",ddl
d654f328-dc36-549e-84c3-06ee0db7e0f7-ddl,,"CREATE TABLE ""playlist_track""
(
    PlaylistId INTEGER  NOT NULL,
    TrackId INTEGER  NOT NULL,
    CONSTRAINT PK_PlaylistTrack PRIMARY KEY  (PlaylistId, TrackId),
    FOREIGN KEY (PlaylistId) REFERENCES ""playlists"" (PlaylistId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (TrackId) REFERENCES ""tracks"" (TrackId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)",ddl
d93f0d68-023d-5afb-8121-ba346699d318-ddl,,"CREATE TABLE ""customers""
(
    CustomerId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    FirstName NVARCHAR(40)  NOT NULL,
    LastName NVARCHAR(20)  NOT NULL,
    Company NVARCHAR(80),
    Address NVARCHAR(70),
    City NVARCHAR(40),
    State NVARCHAR(40),
    Country NVARCHAR(40),
    PostalCode NVARCHAR(10),
    Phone NVARCHAR(24),
    Fax NVARCHAR(24),
    Email NVARCHAR(60)  NOT NULL,
    SupportRepId INTEGER,
    FOREIGN KEY (SupportRepId) REFERENCES ""employees"" (EmployeeId) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)",ddl
e5879308-329e-543f-a693-0c14e2f9972e-ddl,,"CREATE INDEX IFK_InvoiceLineTrackId ON ""invoice_items"" (TrackId)",ddl
ea84418b-1a28-59b4-a1f4-2fb674208adc-ddl,,"CREATE TABLE sqlite_sequence(name,seq)",ddl
2b4dda0a-a6ac-5e34-8f76-e41c0734d55e-doc,,In the chinook database invoice means order,documentation
ece10d36-9223-5045-9ac8-4b5bc090acb5-doc,,"
    In the 'customers' table, address column names do not have 'Billing' prefix, 
    e.g. country column name is 'country', not 'BillingCountry'
    ",documentation
