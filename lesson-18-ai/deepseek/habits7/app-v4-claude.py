"""
Task Management App based on Stephen Covey's 7 Habits of highly effectively people

- v1 : generated by Claude 3.5 Sonnet
- v2 : generated by DeepSeek 
- v3 : merge v1 and v2, incorporated streamlit-aggrid component by me
- v4 : ask Claude to add user login page

"""

import streamlit as st
import sqlite3
import hashlib
from datetime import datetime, date
import pandas as pd
from st_aggrid import (
    AgGrid, GridOptionsBuilder, GridUpdateMode, DataReturnMode, JsCode
)

# constants
PAGE_SIZE,GRID_HEIGHT=5,200

DB_FILE = "habits7.sqlite"
LIST_TASK_GROUP = ['Work', 'Personal']
LIST_Y_N = ["Y", "N"]
LIST_TASK_STATUS = ["ToDo", "Doing", "Done"]
LIST_PROGRESS = ["0%", "25%", "50%", "75%", "100%"]
LIST_TASK_CATEGORY = ["", "learning", "research", "project", "fun"]

TABLE_H7_TASK = "habits7_task"
TABLE_H7_USER = "habits7_user"


# Aggrid options
# how to set column width
# https://stackoverflow.com/questions/72624323/how-to-set-a-max-column-length-for-streamlit-aggrid
_GRID_OPTIONS = {
    "paginationPageSize": 10,
    "grid_height": 350,
    "return_mode_value": DataReturnMode.__members__["FILTERED"],
    "update_mode_value": GridUpdateMode.__members__["MODEL_CHANGED"],
    "fit_columns_on_grid_load": True,
    "selection_mode": "single",  #  "multiple",  # 
    "allow_unsafe_jscode": True,
    "groupSelectsChildren": True,
    "groupSelectsFiltered": True,
    "enable_pagination": True,
}

st.set_page_config(layout="wide")

# Database connection
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
c = conn.cursor()

# Function to create user table
def create_user_table():
    c.execute(f'''
    CREATE TABLE IF NOT EXISTS {TABLE_H7_USER} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL,
        username TEXT,
        is_admin INTEGER DEFAULT 0 CHECK(is_admin IN (0, 1)),
        is_active INTEGER DEFAULT 1 CHECK(is_active IN (0, 1)),
        profile TEXT,
        note TEXT,
        created_by TEXT,
        created_at TEXT,
        updated_by TEXT,
        updated_at TEXT
    )
    ''')
    conn.commit()

# Function to create task table
def create_task_table():
    c.execute(f'''
    CREATE TABLE IF NOT EXISTS {TABLE_H7_TASK} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        task_name TEXT NOT NULL,
        description TEXT,
        task_group TEXT DEFAULT 'Personal' CHECK(task_group IN ('','Work', 'Personal')),
        is_urgent TEXT DEFAULT 'N' CHECK(is_urgent IN ('Y', 'N')),
        is_important TEXT DEFAULT 'N' CHECK(is_important IN ('Y', 'N')),
        status TEXT DEFAULT '' CHECK(status IN ('', 'ToDo', 'Doing', 'Done')),
        pct_completed TEXT DEFAULT '0%' CHECK(pct_completed IN ('0%', '25%', '50%', '75%', '100%')),
        due_date TEXT,
        category TEXT DEFAULT '' CHECK(category IN ('', 'learning', 'research', 'project', 'fun')),
        note TEXT,
        created_by TEXT,
        created_at TEXT,
        updated_by TEXT,
        updated_at TEXT
    )
    ''')
    conn.commit()


def _display_df_grid(df, 
        selection_mode="single",  # "multiple", 
        fit_columns_on_grid_load=_GRID_OPTIONS["fit_columns_on_grid_load"],
        # min_column_width=_GRID_OPTIONS["min_column_width"],
        page_size=_GRID_OPTIONS["paginationPageSize"],
        grid_height=_GRID_OPTIONS["grid_height"],
        clickable_columns=[],
        editable_columns=[],
        colored_columns={},
        key_name="df"
    ):
    """show input df in a grid and return selected row

    URL link stopped working - see fix reported here
    https://discuss.streamlit.io/t/streamlit-aggrid-version-creating-an-aggrid-with-columns-with-embedded-urls/39640/2
    """

    # gb = GridOptionsBuilder.from_dataframe(df, min_column_width=min_column_width)
    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_selection(selection_mode,
            use_checkbox=True,
            groupSelectsChildren=_GRID_OPTIONS["groupSelectsChildren"], 
            groupSelectsFiltered=_GRID_OPTIONS["groupSelectsFiltered"]
        )
    gb.configure_pagination(paginationAutoPageSize=True, 
        paginationPageSize=page_size)
    
    gb.configure_columns(editable_columns, editable=True)

    # color column
    for k,v in colored_columns.items():
        gb.configure_column(k, cellStyle=v)

    if clickable_columns:       # config clickable columns
        ## broken after streamlit-aggrid v0.3.4
        # cell_renderer_url =  JsCode("""
        #     function(params) {return `<a href=${params.value} target="_blank">${params.value}</a>`}
        # """)

        # fix
        cell_renderer_url =  JsCode("""
            class UrlCellRenderer {
                init(params) {
                    this.eGui = document.createElement('a');
                    this.eGui.innerText = params.value;
                    this.eGui.setAttribute('href', params.value);
                    this.eGui.setAttribute('style', "text-decoration:none");
                    this.eGui.setAttribute('target', "_blank");
                }
                getGui() {
                    return this.eGui;
                }
            }
        """)

        for col_name in clickable_columns:
            gb.configure_column(col_name, cellRenderer=cell_renderer_url)


    gb.configure_grid_options(domLayout='normal')
    grid_response = AgGrid(
        df, 
        gridOptions=gb.build(),
        data_return_mode=_GRID_OPTIONS["return_mode_value"],
        update_mode=_GRID_OPTIONS["update_mode_value"],
        height=grid_height, 
        # width='100%',
        fit_columns_on_grid_load=fit_columns_on_grid_load,
        allow_unsafe_jscode=True, #Set it to True to allow jsfunction to be injected
        key=key_name
    )
 
    return grid_response

# Function to add data
def add_task(task_name, description, task_group, is_urgent, is_important, status, pct_completed, due_date, category, note, created_by, created_at, updated_by, updated_at):
    c.execute(f'''
    INSERT INTO {TABLE_H7_TASK} (task_name, description, task_group, is_urgent, is_important, status, pct_completed, due_date, category, note, created_by, created_at, updated_by, updated_at)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (task_name, description, task_group, is_urgent, is_important, status, pct_completed, due_date, category, note, created_by, created_at, updated_by, updated_at))
    conn.commit()

# Function to view all data
def view_all_tasks(user_id):
    c.execute(f'''
        SELECT * FROM {TABLE_H7_TASK} where created_by = ? order by task_name;
    ''', (user_id,)
    )
    data = c.fetchall()
    return data

# Function to view all task names
def view_all_task_names(user_id):
    c.execute(f'''
        SELECT DISTINCT task_name FROM {TABLE_H7_TASK} where created_by = ? order by task_name;
    ''', (user_id,)
    )
    data = c.fetchall()
    return data

# Function to get task by name
def get_task_by_name(task_name, user_id):
    c.execute(f'''
        SELECT * FROM {TABLE_H7_TASK} WHERE task_name=? and created_by=?
    ''', (task_name,user_id)
    )
    data = c.fetchall()
    return data

# Function to get task by status
def get_task_by_status(status, user_id):
    c.execute(f'''
        SELECT * FROM {TABLE_H7_TASK} WHERE status=? and created_by=?
    ''', (status, user_id))
    data = c.fetchall()
    return data

# Function to edit task data
def edit_task(new_task_name, new_description, new_task_group, new_is_urgent, new_is_important, new_status, new_pct_completed, new_due_date, new_category, new_note, new_updated_by, new_updated_at, task_name, user_id):
    c.execute(f'''
        UPDATE {TABLE_H7_TASK} 
        SET task_name=?, description=?, task_group=?, is_urgent=?, is_important=?, status=?, pct_completed=?, due_date=?, category=?, note=?, updated_by=?, updated_at=?
        WHERE task_name=? and created_by=?
    ''', (new_task_name, new_description, new_task_group, new_is_urgent, new_is_important, new_status, new_pct_completed, new_due_date, new_category, new_note, new_updated_by, new_updated_at
          , task_name, user_id)
    )
    conn.commit()
    data = c.fetchall()
    return data

# Function to delete data
def delete_task(task_name, user_id):
    c.execute(f'''
        DELETE FROM {TABLE_H7_TASK} WHERE task_name=? and created_by=?
    ''', (task_name,user_id))
    conn.commit()


# Function to hash password
def hash_password(password):
    return hashlib.sha256(str.encode(password)).hexdigest()

# Function to add user
def add_user(email, password, username, is_admin=0, is_active=1, profile="", note=""):
    hashed_password = hash_password(password)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute(f'''
    INSERT INTO {TABLE_H7_USER} (email, password, username, is_admin, is_active, profile, note, created_by, created_at, updated_by, updated_at)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (email, hashed_password, username, is_admin, is_active, profile, note, email, now, email, now))
    conn.commit()

# Function to verify user
def verify_user(email, password):
    hashed_password = hash_password(password)
    c.execute(f"SELECT * FROM {TABLE_H7_USER} WHERE email = ? AND password = ?", (email, hashed_password))
    user = c.fetchone()
    return user

# Function to check if email exists
def email_exists(email):
    c.execute(f"SELECT * FROM {TABLE_H7_USER} WHERE email = ?", (email,))
    user = c.fetchone()
    return user is not None

# Login page
def login_page():
    st.subheader("Login")
    email = st.text_input("Email")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        user = verify_user(email, password)
        if user:
            st.session_state['logged_in'] = True
            st.session_state['user_id'] = user[0]
            user_name = user[3]
            st.session_state['username'] = user_name
            st.success(f"Logged in as {user_name}")
            st.rerun()
        else:
            st.error("Incorrect email or password")

# Registration page
def registration_page():
    st.subheader("Register")
    email = st.text_input("Email")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    confirm_password = st.text_input("Confirm Password", type="password")
    
    if st.button("Register"):
        if password != confirm_password:
            st.error("Passwords do not match")
        elif email_exists(email):
            st.error("Email already exists")
        else:
            add_user(email, password, username)
            st.success("Registration successful. Please login.")

# Main app logic
def main():
    st.sidebar.subheader("7 Habits Task Manager")    

    # Initialize session state
    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False

    # Sidebar for login/logout
    if st.session_state['logged_in']:
        st.sidebar.write(f"Logged in as: {st.session_state['username']}")
        if st.sidebar.button("Logout"):
            st.session_state['logged_in'] = False
            st.session_state['user_id'] = None
            st.session_state['username'] = None
            st.rerun()
    else:

        auth_option = st.sidebar.radio("Choose an option", ["Login", "Register"])
        if auth_option == "Login":
            login_page()
        else:
            registration_page()

    # Only show the main app if logged in
    if not st.session_state['logged_in']:
        return
    
    user_id = st.session_state['user_id']
    
    menu = ["Home", "7-Habits-Task View", "View Tasks", "Add Task", "Edit Task", "Delete Task"]
    choice = st.sidebar.selectbox("Menu", menu)

    if choice == "Home":
        st.subheader("Home")
        st.write("Welcome to the 7 Habits Task Manager. Use the sidebar to navigate through the app.")
        st.write("[Learn more about the 7 Habits of Highly Effective People](https://en.wikipedia.org/wiki/The_7_Habits_of_Highly_Effective_People)")

    elif choice == "Add Task":
        st.subheader("Add a New Task")
        col1, col2, col3 = st.columns(3)

        with col1:
            task_name = st.text_input("Task Name")
            description = st.text_area("Description")
            due_date = st.date_input("Due Date", value=date.today()).strftime("%Y/%m/%d")
            is_urgent = st.selectbox("Is Urgent?", LIST_Y_N)
            is_important = st.selectbox("Is Important?", LIST_Y_N)

        with col2:
            task_group = st.selectbox("Task Group", LIST_TASK_GROUP)
            status = st.selectbox("Status", LIST_TASK_STATUS)
            pct_completed = st.selectbox("Percentage Completed", LIST_PROGRESS)
            category = st.selectbox("Category", LIST_TASK_CATEGORY)
            note = st.text_area("Note")

        with col3:
            created_by = st.text_input("Created By")
            created_at = st.text_input("Created At")
            updated_by = st.text_input("Updated By")
            updated_at = st.text_input("Updated At")

        if st.button("Add Task"):
            add_task(task_name, description, task_group, is_urgent, is_important, status, pct_completed, due_date, category, note, user_id, created_at, user_id, updated_at)
            st.success("Task Added: {}".format(task_name))

    elif choice == "View Tasks":
        st.subheader("View All Tasks")
        result = view_all_tasks(user_id)
        df = pd.DataFrame(result, columns=["ID", "Task Name", "Description", "Task Group", "Is Urgent", "Is Important", "Status", "Percentage Completed", "Due Date", "Category", "Note", "Created By", "Created At", "Updated By", "Updated At"])      
        grid_resp = _display_df_grid(df)

    elif choice == "Edit Task":
        st.subheader("Edit Task")
        task_name = st.selectbox("Select Task", [task[0] for task in view_all_task_names(user_id)])
        task_data = get_task_by_name(task_name, user_id)
        if task_data:
            task_name = task_data[0][1]
            description = task_data[0][2]
            task_group = task_data[0][3]
            is_urgent = task_data[0][4]
            is_important = task_data[0][5]
            status = task_data[0][6]
            pct_completed = task_data[0][7]
            due_date = task_data[0][8]
            category = task_data[0][9]
            note = task_data[0][10]
            created_by = task_data[0][11]
            created_at = task_data[0][12]
            updated_by = task_data[0][13]
            updated_at = task_data[0][14]

            col1, col2, col3 = st.columns(3)

            with col1:
                new_task_name = st.text_input("Task Name", task_name)
                new_description = st.text_area("Description", description)
                new_due_date = st.date_input("Due Date", value=date.today()).strftime("%Y/%m/%d")  # 
                new_is_urgent = st.selectbox("Is Urgent?", LIST_Y_N, index=LIST_Y_N.index(is_urgent))
                new_is_important = st.selectbox("Is Important?", LIST_Y_N, index=LIST_Y_N.index(is_important))

            with col2:
                new_task_group = st.selectbox("Task Group", LIST_TASK_GROUP, index=LIST_TASK_GROUP.index(task_group))
                new_status = st.selectbox("Status", LIST_TASK_STATUS, index=LIST_TASK_STATUS.index(status))
                new_pct_completed = st.selectbox("Percentage Completed", LIST_PROGRESS, index=LIST_PROGRESS.index(pct_completed))
                new_category = st.selectbox("Category", LIST_TASK_CATEGORY, index=LIST_TASK_CATEGORY.index(category))
                new_note = st.text_area("Note", note)

            with col3:
                new_updated_by = st.text_input("Updated By", updated_by)
                new_updated_at = st.text_input("Updated At", updated_at)

            if st.button("Update Task"):
                edit_task(new_task_name, new_description, new_task_group, new_is_urgent, new_is_important, new_status, new_pct_completed, new_due_date, new_category, new_note, new_updated_by, new_updated_at, 
                        task_name, user_id)
                st.success("Task Updated: {}".format(new_task_name))

    elif choice == "Delete Task":
        st.subheader("Delete Task")
        task_name = st.selectbox("Select Task", [task[0] for task in view_all_task_names(user_id)])
        if st.button("Delete Task"):
            delete_task(task_name, user_id)
            st.success("Task Deleted: {}".format(task_name))

    elif choice == "7-Habits-Task View":
        st.subheader("7 Habits View")

        # Filters
        task_groups = LIST_TASK_GROUP
        statuses = LIST_TASK_STATUS
        f_1, f_2 = st.columns(2)
        with f_1:
            selected_task_groups = st.multiselect("Filter by Task Group", task_groups, default=["Personal"])
            # st.write(selected_task_groups)
        with f_2:
            selected_statuses = st.multiselect("Filter by Status", statuses, default=["ToDo", "Doing"])
            # st.write(selected_statuses)

        # Fetch all tasks
        all_tasks = view_all_tasks(user_id)
        df = pd.DataFrame(all_tasks, columns=["ID", "Task Name", "Description", "Task Group", "Is Urgent", "Is Important", "Status", "Percentage Completed", "Due Date", "Category", "Note", "Created By", "Created At", "Updated By", "Updated At"])

        # Apply filters
        filtered_df = df[(df['Task Group'].isin(selected_task_groups)) & (df['Status'].isin(selected_statuses))]

        selected_columns = ["Task Name", "Description", "ID"]
        # Display quadrants in a 2x2 grid layout
        row1_col1, row1_col2 = st.columns(2)
        with row1_col1:
            st.markdown("##### Un-Important/Urgent (ii)")
            df_2 = filtered_df[(filtered_df['Is Important'] == 'N') & (filtered_df['Is Urgent'] == 'Y')][selected_columns]
            grid_resp_2 = _display_df_grid(df_2, key_name="df_2", page_size=PAGE_SIZE, grid_height=GRID_HEIGHT)

        with row1_col2:
            st.markdown("##### Important/Urgent (i)")
            df_1 = filtered_df[(filtered_df['Is Important'] == 'Y') & (filtered_df['Is Urgent'] == 'Y')][selected_columns]
            grid_resp_1 = _display_df_grid(df_1, key_name="df_1", page_size=PAGE_SIZE, grid_height=GRID_HEIGHT)

        row2_col1, row2_col2 = st.columns(2)
        with row2_col1:
            st.markdown("##### Un-Important/Un-Urgent (iii)")
            df_3 = filtered_df[(filtered_df['Is Important'] == 'N') & (filtered_df['Is Urgent'] == 'N')][selected_columns]
            grid_resp_3 = _display_df_grid(df_3, key_name="df_3", page_size=PAGE_SIZE, grid_height=GRID_HEIGHT)

        with row2_col2:
            st.markdown("##### Important/Un-Urgent (iv)")
            df_4 = filtered_df[(filtered_df['Is Important'] == 'Y') & (filtered_df['Is Urgent'] == 'N')][selected_columns]
            grid_resp_4 = _display_df_grid(df_4, key_name="df_4", page_size=PAGE_SIZE, grid_height=GRID_HEIGHT)

if __name__ == '__main__':
    create_task_table()  # Create tasks table
    create_user_table()  # Create users table
    main()